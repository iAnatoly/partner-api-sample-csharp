/* 
 * REST API v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Hosting.PublicAPI.Sample.Generated.Invokers;
using Hosting.PublicAPI.Sample.Generated.Models.Accounts;

namespace Hosting.PublicAPI.Sample.Generated.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes account.
        /// </summary>
        /// <remarks>
        /// Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </remarks>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>Object</returns>
        Object AccountsV1DeleteAccount (string accountID, string reason, string comments = null);

        /// <summary>
        /// Deletes account.
        /// </summary>
        /// <remarks>
        /// Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </remarks>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AccountsV1DeleteAccountWithHttpInfo (string accountID, string reason, string comments = null);
        
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes account.
        /// </summary>
        /// <remarks>
        /// Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </remarks>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AccountsV1DeleteAccountAsync (string accountID, string reason, string comments = null);

        /// <summary>
        /// Deletes account.
        /// </summary>
        /// <remarks>
        /// Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </remarks>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountsV1DeleteAccountAsyncWithHttpInfo (string accountID, string reason, string comments = null);
        
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private Hosting.PublicAPI.Sample.Generated.Invokers.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Hosting.PublicAPI.Sample.Generated.Invokers.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Hosting.PublicAPI.Sample.Generated.Invokers.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Hosting.PublicAPI.Sample.Generated.Invokers.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes account. Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </summary>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>Object</returns>
        public Object AccountsV1DeleteAccount (string accountID, string reason, string comments = null)
        {
             ApiResponse<Object> localVarResponse = AccountsV1DeleteAccountWithHttpInfo(accountID, reason, comments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes account. Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </summary>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AccountsV1DeleteAccountWithHttpInfo (string accountID, string reason, string comments = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountsApi->AccountsV1DeleteAccount");
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling AccountsApi->AccountsV1DeleteAccount");

            var localVarPath = "/v1/api/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (reason != null) localVarQueryParams.Add("reason", Configuration.ApiClient.ParameterToString(reason)); // query parameter
            if (comments != null) localVarQueryParams.Add("comments", Configuration.ApiClient.ParameterToString(comments)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsV1DeleteAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes account. Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </summary>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AccountsV1DeleteAccountAsync (string accountID, string reason, string comments = null)
        {
             ApiResponse<Object> localVarResponse = await AccountsV1DeleteAccountAsyncWithHttpInfo(accountID, reason, comments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes account. Please use with care. This is irreversible operation (all customer data will be lost after account deletion).
        /// </summary>
        /// <exception cref="Hosting.PublicAPI.Sample.Generated.Invokers.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The account&#39;s id.</param>
        /// <param name="reason">Gets or sets the account&#39;s leaving reason.</param>
        /// <param name="comments">Gets or sets the account&#39;s leaving comments. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccountsV1DeleteAccountAsyncWithHttpInfo (string accountID, string reason, string comments = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountsApi->AccountsV1DeleteAccount");
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling AccountsApi->AccountsV1DeleteAccount");

            var localVarPath = "/v1/api/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (reason != null) localVarQueryParams.Add("reason", Configuration.ApiClient.ParameterToString(reason)); // query parameter
            if (comments != null) localVarQueryParams.Add("comments", Configuration.ApiClient.ParameterToString(comments)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsV1DeleteAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }
    }
}
